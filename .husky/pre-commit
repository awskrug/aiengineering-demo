#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# 변경된 파일 확인
CHANGED_FILES=$(git diff --cached --name-only)

# 프론트엔드 변경 확인
FRONTEND_CHANGED=false
for file in $CHANGED_FILES; do
  if [[ $file == frontend/* ]]; then
    FRONTEND_CHANGED=true
    break
  fi
done

# 백엔드 변경 확인
BACKEND_CHANGED=false
for file in $CHANGED_FILES; do
  if [[ $file == backend/* ]]; then
    BACKEND_CHANGED=true
    break
  fi
done

# 테라폼 변경 확인
TERRAFORM_CHANGED=false
for file in $CHANGED_FILES; do
  if [[ $file == terraform/*.tf ]]; then
    TERRAFORM_CHANGED=true
    break
  fi
done

# 변경된 부분에 따라 린트, 빌드 및 테스트 실행
if [ "$FRONTEND_CHANGED" = true ]; then
  echo "🔍 프론트엔드 변경 감지: 린트 자동 수정, 빌드 및 테스트 실행 중..."
  cd frontend && npm run lint:fix
  # 수정된 파일들을 다시 스테이징
  cd .. && git add frontend/
  # 빌드 및 테스트 실행
  cd frontend && npm run build && npm test
  if [ $? -ne 0 ]; then
    echo "❌ 프론트엔드 빌드 또는 테스트 실패"
    exit 1
  fi
  echo "✅ 프론트엔드 린트 자동 수정, 빌드 및 테스트 성공"
  cd ..
fi

if [ "$BACKEND_CHANGED" = true ]; then
  echo "🔍 백엔드 변경 감지: 린트 자동 수정, 빌드 및 테스트 실행 중..."
  cd backend && npm run lint:fix
  # 수정된 파일들을 다시 스테이징
  cd .. && git add backend/
  # 빌드 및 테스트 실행
  cd backend && npm run build && npm test
  if [ $? -ne 0 ]; then
    echo "❌ 백엔드 빌드 또는 테스트 실패"
    exit 1
  fi
  echo "✅ 백엔드 린트 자동 수정, 빌드 및 테스트 성공"
  cd ..
fi

if [ "$TERRAFORM_CHANGED" = true ]; then
  echo "🔍 테라폼 변경 감지: 의존관계 그래프 생성 중..."
  cd terraform && ./generate_graph.sh
  if [ $? -ne 0 ]; then
    echo "❌ 테라폼 그래프 생성 실패"
    exit 1
  fi
  git add terraform/graphs/terraform_graph.png terraform/graphs/terraform_graph.svg
  echo "✅ 테라폼 그래프 생성 성공"
  cd ..
fi

# lint-staged 실행 (추가적인 린팅 작업이 필요한 경우)
npx lint-staged
